datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name              String
  password          Password?
  role              Role                 @default(USER)
  participations    ParticipantOfParty[]
  workloads         Workload[]
  newsWritten       News[]
  pushNotifications PushNotification[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

enum Role {
  ADMIN
  ORGANIZER
  TRUSTED_USER
  USER
  DISABLED
}

model Party {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startDate    DateTime             @unique
  endDate      DateTime             @unique
  name         String?
  participants ParticipantOfParty[]
  workloads    Workload[]
  entryFee     Int                  @default(2000)
  entryDeposit Int                  @default(2500)
  workDeposit  Int                  @default(2500)
}

model Workload {
  id String @id @default(cuid())

  title           String
  description     String @default("")
  assignees       User[]
  party           Party  @relation(fields: [partyId], references: [id], onDelete: Cascade)
  partyId         String
  order           Int    @default(autoincrement())
  // offsets when this workload should happen (0 = first day, 1 = second day, etc., -1 = last day, -2 = second to last day, etc.)
  scheduledOnDays Int[]
  maxAssignees    Int    @default(1)

  dependents   WorkloadDependency[] @relation(name: "dependents")
  dependencies WorkloadDependency[] @relation(name: "dependencies")
}

model WorkloadDependency {
  dependent    Workload @relation(name: "dependents", fields: [dependentId], references: [id], onDelete: Cascade)
  dependentId  String
  dependency   Workload @relation(name: "dependencies", fields: [dependencyId], references: [id], onDelete: Cascade)
  dependencyId String

  @@id([dependentId, dependencyId])
}

model ParticipantOfParty {
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  party   Party  @relation(fields: [partyId], references: [id], onDelete: Cascade)
  partyId String

  arrivingAt     DateTime
  departingAt    DateTime
  paidMoney      Int?
  donatedMoney   Int?
  pendingPayment Boolean  @default(false)

  @@id([userId, partyId])
}

model News {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title    String
  text     String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
}

model PushNotification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  endpoint String @unique
  keys     Json
}

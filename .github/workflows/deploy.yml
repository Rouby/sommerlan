name: üöÄ Deploy
on:
  push:
    branches:
      - main
      - dev
  pull_request: {}

jobs:
  lint:
    name: ‚¨£ Lint
    runs-on: ubuntu-latest

    concurrency:
      group: lint-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      - name: üì• Install deps
        run: yarn install --immutable --immutable-cache

      - name: üî¨ Lint
        run: yarn lint

  typecheck:
    name:  ¶ TypeScript
    runs-on: ubuntu-latest

    concurrency:
      group: typecheck-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      - name: üì• Install deps
        run: yarn install --immutable --immutable-cache

      - name: üîé Type check
        run: yarn typecheck

  test:
    name: üß™ Unit tests
    runs-on: ubuntu-latest

    concurrency:
      group: test-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      - name: üì• Install deps
        run: yarn install --immutable --immutable-cache

      - name: üß™ Run vitest
        run: yarn test -- --coverage

  integration:
    name: üîó Integration tests
    runs-on: ubuntu-latest

    concurrency:
      group: integration-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      - name: üì• Install deps
        run: yarn install --immutable --immutable-cache

      - name: üî® Build
        run: yarn build

      - name: üîó Run cypress
        run: yarn integrate
        env:
          SESSION_SECRET: kitty
          NEW_RELIC_ENABLED: "false"
          NEW_RELIC_LOGGING_ENABLED: "false"
          LOG_LEVEL: trace

  branch:
    name: üåø Branch check
    runs-on: ubuntu-latest
    # only build/deploy main branch on pushes
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push' }}

    concurrency:
      group: branch-${{ github.ref }}

    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}
      env_url: ${{ steps.branch_check.outputs.env_url }}
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚úèÔ∏è Write output
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "env_name=production" >> $GITHUB_OUTPUT
            echo "env_url=https://sommerlan.rocks" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            echo "env_name=staging" >> $GITHUB_OUTPUT
            echo "env_url=https://staging.sommerlan.rocks" >> $GITHUB_OUTPUT
          fi

  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    # only build/deploy main branch on pushes
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push' }}

    concurrency:
      group: build-${{ github.ref }}

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚ö°Ô∏è Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üê≥ Docker build
        uses: docker/build-push-action@v5
        with:
          context: .
          outputs: type=docker,dest=/tmp/sommerlan-image.tar
          platforms: linux/arm64
          tags: sommerlan-app:${{ github.ref_name }}-${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: üì¶ Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: sommerlan-image
          path: /tmp/sommerlan-image.tar

  deploy:
    name: üöÄ Deploy
    runs-on: self-hosted
    needs: [lint, typecheck, test, integration, branch, build]
    # only build/deploy main branch on pushes
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push' }}

    concurrency:
      group: deploy-${{ github.ref }}

    environment:
      name: ${{ needs.branch.outputs.env_name }}
      url: ${{ needs.branch.outputs.env_url }}

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: üì¶ Download artifact
        uses: actions/download-artifact@v3
        with:
          name: sommerlan-image
          path: /tmp/sommerlan

      - name: üê≥ Load image
        run: |
          docker load --input /tmp/sommerlan/sommerlan-image.tar

      - name: üöÄ Deploy Staging
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: |
          docker compose -p sommerlan-staging up -d
        env:
          WORKDIR: "/home/pi/sommerlan"
          BRANCH: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
          APP_PORT: "53346"
          APP_ORIGIN: "https://staging.sommerlan.rocks"
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          GOOGLE_SHEET_ID: ${{ vars.GOOGLE_SHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}
          GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_APP_NAME: "sommerlan-staging"
          NEW_RELIC_LOADER_CONFIG: ${{ secrets.NEW_RELIC_LOADER_CONFIG }}
          NEW_RELIC_INFO: ${{ secrets.NEW_RELIC_INFO }}
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORD_GUILD_ID: ${{ secrets.DISCORD_GUILD_ID }}
          DISCORD_ROLE_ID: ${{ secrets.DISCORD_ROLE_ID }}

      - name: üöÄ Deploy Production
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          docker compose -p sommerlan-production up -d
        env:
          WORKDIR: "/home/pi/sommerlan"
          BRANCH: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
          APP_PORT: "53345"
          APP_ORIGIN: "https://sommerlan.rocks"
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          GOOGLE_SHEET_ID: ${{ vars.GOOGLE_SHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}
          GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_APP_NAME: "sommerlan-production"
          NEW_RELIC_LOADER_CONFIG: ${{ secrets.NEW_RELIC_LOADER_CONFIG }}
          NEW_RELIC_INFO: ${{ secrets.NEW_RELIC_INFO }}
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORD_GUILD_ID: ${{ secrets.DISCORD_GUILD_ID }}
          DISCORD_ROLE_ID: ${{ secrets.DISCORD_ROLE_ID }}

  newrelic:
    name: üéØ newrelic
    runs-on: ubuntu-latest
    needs: [branch, deploy]
    # only build/deploy main branch on pushes
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push' }}

    concurrency:
      group: newrelic-${{ github.ref }}

    environment:
      name: ${{ needs.branch.outputs.env_name }}

    steps:
      - name: üè∑Ô∏è New Relic Application Deployment Marker
        uses: newrelic/deployment-marker-action@v2.2.0
        with:
          apiKey: ${{ secrets.NEW_RELIC_API_KEY }}
          region: "EU"
          guid: ${{ secrets.NEW_RELIC_DEPLOYMENT_ENTITY_GUID_SERVER }}
          version: "${{ github.sha }}"
          commit: "${{ github.sha }}"
          user: "${{ github.actor }}"

extend type Query {
  me: User
}

extend type Mutation {
  register(
    userName: String!
    email: String!
    password: String
  ): RegisterResponse!

  generatePasskeyRegisterOptions(userId: String!): JSON!
  registerPasskey(userId: String!, name: String!, response: JSON!): JSON!

  generatePasskeyLoginOptions(userId: String): JSON!
  loginPasskey(response: JSON!): LoginResponse!

  loginPassword(email: String!, password: String!): AuthResponse!

  sendMagicLink(email: String!): Boolean!
  loginMagicLink(magicLinkId: String!): AuthResponse!

  refreshLogin(refreshToken: String!): AuthResponse!
}

type AuthResponse {
  token: JWT!
  refreshToken: String!
}

type RegisterResponse {
  user: User!
  token: String!
  refreshToken: String!
}

type LoginResponse {
  credentialID: [Int!]!
  token: JWT!
  refreshToken: String!
}

type User {
  id: ID!
  name: String!
  displayName: String!
  email: String!
  avatar: String!
  avatarUrl: String
}

extend type Attending {
  user: User!
}

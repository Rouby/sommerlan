extend type Query {
  me: User

  users: [User!]!
}

extend type Mutation {
  register(
    userName: String!
    email: String!
    password: String
  ): RegisterResponse!

  generatePasskeyRegisterOptions(userId: String!): JSON!
  registerPasskey(
    userId: String!
    name: String!
    response: JSON!
  ): RegisterDeviceResponse!

  generatePasskeyLoginOptions(userId: String): JSON!
  loginPasskey(response: JSON!): LoginResponse!

  loginPassword(email: String!, password: String!): AuthResponse!

  sendMagicLink(email: String!): Boolean!
  loginMagicLink(magicLinkId: String!): AuthResponse!

  refreshLogin(refreshToken: String!): AuthResponse!

  updateAuthDevice(id: ID!, name: String!): AuthDevice!
  deleteAuthDevice(id: ID!): AuthDevice!

  updateProfile(input: ProfileInput!): User!
  removeProfilePicture: User!

  updateRoles(id: ID!, roles: [Role!]!): User!
}

extend type Attending {
  user: User!
}

type AuthResponse {
  token: JWT!
  refreshToken: String!
}

type RegisterResponse {
  user: User!
  token: String!
  refreshToken: String!
}

type LoginResponse {
  credentialID: [Int!]!
  token: JWT!
  refreshToken: String!
}

type RegisterDeviceResponse {
  token: String!
  device: AuthDevice!
}

type User {
  id: ID!
  name: String!
  displayName: String!
  email: String!
  avatar: String!
  avatarUrl: String
  devices: [AuthDevice!]!
  roles: [Role!]!
}

input ProfileInput {
  id: ID
  name: String!
  displayName: String!
  email: String!
  password: String
  avatar: File
}

type AuthDevice {
  id: ID!
  name: String!
  createdAt: DateTime
  lastUsedAt: DateTime
}

enum Role {
  Trusted
  Admin
  Doorkeeper
  Bookkeeper
}

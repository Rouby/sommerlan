extend type Query {
  party(id: ID!): Party
  parties: [Party!]!
  nextParty: Party
}

extend type Mutation {
  setAttendance(partyId: ID!, userId: ID, dates: [Date!]!): Party!
  requestRoom(partyId: ID!): Attending
  recindRoom(partyId: ID!): Attending
  grantRoom(attendingId: ID!): Attending
  denyRoom(attendingId: ID!): Attending

  updateParty(input: PartyInput!): Party!
}

type Party {
  id: ID!
  startDate: Date!
  endDate: Date!
  location: String!
  locationWidgetSrc: String
  roomsAvailable: Int!
  attendings: [Attending!]!
}

input PartyInput {
  id: ID
  startDate: Date!
  endDate: Date!
  location: String!
  locationWidgetSrc: String
  roomsAvailable: Int!
}

type Attending {
  id: ID!
  party: Party!
  dates: [Date!]!
  room: RoomStatus
}

enum RoomStatus {
  REQUESTED
  GRANTED
}

extend type Query {
  party(id: ID!): Party
  parties: [Party!]!
  nextParty: Party
}

extend type Mutation {
  setAttendance(partyId: ID!, userId: ID, dates: [Date!]!): Party!
  removeAttendance(partyId: ID!, userId: ID): Party!
  requestRoom(partyId: ID!): Attending
  recindRoom(partyId: ID!): Attending
  grantRoom(attendingId: ID!): Attending
  denyRoom(attendingId: ID!): Attending

  updateParty(input: PartyInput!): Party!

  addPicture(input: PictureInput!): Picture!

  checkIn(userId: ID!): Attending
  checkOut(userId: ID!): Attending

  updatePaidDues(attendingId: ID!, paidDues: Float!): Attending

  createPayPalOrder: ID!
  capturePayPalOrder(orderId: ID!): Attending

  sendPaymentNotification(userId: ID!): Attending!
  sendPaymentNotificationToAll: [Attending!]!
}

type Party @rbac {
  id: ID!
  startDate: Date!
  endDate: Date!
  tentative: Boolean!
  latitude: Float!
  longitude: Float!
  location: String!
  locationWidgetSrc: String
  roomsAvailable: Int!
  rentalCosts: Float!
  attendings: [Attending!]!
  attending(userId: ID): Attending
  pictures: [Picture!]!
  seatsAvailable: Int!
  registrationDeadline: Date
  payday: Date
  finalCostPerDay: Float
  paidDues: Float
}

type Picture {
  id: ID!
  url: String!
  party: Party!
  tags: [PictureTag!]!
  meta: PictureMeta!
}

type PictureMeta {
  width: Int!
  height: Int!
  latitude: Float
  longitude: Float
  altitude: Float
  takeAt: DateTime
}

type PictureTag {
  id: ID!
  user: User!
  picture: Picture!
  boundingBox: BoundingBox!
}

scalar BoundingBox

input PartyInput {
  id: ID
  startDate: Date!
  endDate: Date!
  location: String!
  locationWidgetSrc: String
  roomsAvailable: Int!
}

input PictureInput {
  name: String!
  partyId: ID!
  file: File!
  tags: [PictureTagInput!]
}

input PictureTagInput {
  userId: ID!
  boundingBox: BoundingBox!
}

type Attending {
  id: ID!
  party: Party!
  dates: [Date!]!
  room: RoomStatus
  applicationDate: Date!
  rentDues: Float
  paidDues: Float!
  checkIn: DateTime
  checkOut: DateTime
  notificationSent: DateTime
}

enum RoomStatus {
  REQUESTED
  GRANTED
}
